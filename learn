SQL Learning Plan + Practice Exercises
Beginner Level

https://sqlitebrowser.org/dl/    Download from here

1. Roadmap (8 weeks, flexible)

Week 1 — Basics & SELECT: single-table queries, filters, sorting, aggregates.

Week 2 — Joins & Multi-table: INNER/LEFT/RIGHT (LEFT in SQLite), CROSS, practice joins.

Week 3 — Schema & DDL: CREATE, ALTER, DROP, constraints (PK, FK, UNIQUE, NOT NULL).

Week 4 — Normalization & ER design: 1NF→3NF, ER diagrams, junction tables.

Week 5 — Advanced SQL: subqueries, correlated subqueries, CASE, views.

Week 6 — Indexes & Performance basics: indexes, EXPLAIN QUERY PLAN, simple tuning.

Week 7 — Transactions & Data integrity: BEGIN/COMMIT/ROLLBACK, foreign key behaviors.

Week 8 — Mini projects & revision: 2 small projects, walkthrough, review.

Work pace: 3–6 hours/week is sufficient. Do all exercises in SQLite.

2. Setup you already have

You have SQLite + DB Browser. Good.
Open DB Browser → File → New Database → create learning.db. Use the Execute SQL tab to run examples below.

3. Week 1 — Basics & SELECT (Day-by-day)
Day 1 — Single table

Goal: read data and filter.
Create table + data (run these in Execute SQL):

CREATE TABLE students (
  student_id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  age INTEGER,
  course TEXT,
  city TEXT
);

INSERT INTO students (name, age, course, city) VALUES
('Ananya', 21, 'LLB', 'Delhi'),
('Ravi', 24, 'LLM', 'Mumbai'),
('Leela', 22, 'LLB', 'Bengaluru'),
('Kishan', 46, 'LLM', 'Sonipat');


Practice

Show all students.
SELECT * FROM students;

Students older than 22.
SELECT name, age FROM students WHERE age > 22;

Names alphabetically.
SELECT name FROM students ORDER BY name;

Count students per course.
SELECT course, COUNT(*) FROM students GROUP BY course;

Day 2 — Projection & Functions

Try:

SELECT DISTINCT course FROM students;

SELECT name || ' (' || city || ')' AS label FROM students;
1️⃣ name || ' (' || city || ')'

The double pipe symbols || mean concatenate (join) text strings together in SQLite.
So, this joins three pieces:

name
' (' — literal text with a space and an open bracket
city
')' — literal closing bracket
✅ Together it forms one combined string.

2️⃣ AS label
AS gives that combined result a temporary column name (alias).
So the output column will be called label.

SELECT AVG(age) FROM students;

Exercise answers: run queries to verify.
===================================================================
4. Week 2 — Joins & Multiple Tables

Create sample tables:

CREATE TABLE authors (author_id INTEGER PRIMARY KEY, name TEXT);
CREATE TABLE books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER,
                    price REAL, FOREIGN KEY(author_id) REFERENCES authors(author_id));
INSERT INTO authors (name) VALUES ('J.K. Rowling'), ('GRR Martin');
INSERT INTO books (title, author_id, price) VALUES
('Harry Potter', 1, 450.0), ('Game of Thrones', 2, 550.0);


Practice

List books with author names.

SELECT b.title, a.name
FROM books b
JOIN authors a ON b.author_id = a.author_id;


Left join authors with books (show authors even if no book).

SELECT a.name, b.title
FROM authors a
LEFT JOIN books b ON a.author_id = b.author_id;


Exercises

Find books priced > 500.

Count books per author.
===============
5. Week 3 — DDL & Constraints

Tasks

Add UNIQUE on email:

CREATE TABLE customers (
  customer_id INTEGER PRIMARY KEY,
  name TEXT,
  email TEXT UNIQUE
);


Add column to books:

ALTER TABLE books ADD COLUMN genre TEXT;
UPDATE books SET genre = 'Fantasy';


Exercises

Create orders table with order_id, customer_id, order_date, total.

Create order_items(order_id, book_id, qty, PRIMARY KEY(order_id, book_id)).
======================
6. Week 4 — Normalization & ER design (practical)
Example messy table (unnormalized)
order_id | customer_name | customer_email | book1 | book2 | total


Step-by-step normalize

Move customer fields to customers table.

Create orders table with order_id, customer_id, order_date, total.

Create order_items linking table: order_id, book_id, qty.

Create books table with book_id, title, price.

Practice exercise

I’ll paste a messy CSV (you can create it in a new table). Convert to 1NF, then to 2NF, then to 3NF.

Show SQL CREATE statements for the final normalized schema.

Checklist for normalization

No repeating columns (book1, book2 → rows instead).

No partial dependencies (split tables so non-key attributes depend on full PK).

No transitive dependencies (attributes depend only on keys).

7. Week 5 — Advanced SQL constructs

Topics

Subqueries vs JOINs

Correlated subqueries

CASE expressions

Window functions (SQLite supports some window functions)

Examples

Correlated subquery: customers who spent more than average:

SELECT c.customer_id, c.name
FROM customers c
WHERE (SELECT SUM(o.total) FROM orders o WHERE o.customer_id = c.customer_id) >
      (SELECT AVG(total) FROM orders);


Window example: rank books by price:

SELECT title, price,
       RANK() OVER (ORDER BY price DESC) AS price_rank
FROM books;


Exercises

For each order, show total items and grand total.

Write a query that flags expensive books (CASE WHEN price>500 THEN 'High' ELSE 'Normal' END).
=========================================================================================================
8. Week 6 — Indexes & EXPLAIN

Create an index:

CREATE INDEX idx_books_price ON books(price);


Explain plan:

EXPLAIN QUERY PLAN SELECT * FROM books WHERE price > 400;


Practice

Compare query time with and without index for a large table (simulate data with many rows using loops/inserts).

9. Week 7 — Transactions & Foreign Keys

Enable foreign keys (SQLite)

PRAGMA foreign_keys = ON;


Transaction example

BEGIN TRANSACTION;
INSERT INTO orders (...) VALUES (...);
INSERT INTO order_items (...) VALUES (...);
COMMIT;
-- or ROLLBACK on error


Exercise

Create a transfer-like operation. Insert into two tables within one transaction. Simulate error and rollback.

10. Week 8 — Projects (choose 2)
Project A — Bookstore system

Full schema: authors, books, customers, orders, order_items, reviews.

Features to implement:

Add book (transactional)

Query top 5 customers by spend

Add a view customer_spend(customer_id, total_spent)

Project B — Student course enrollment

Schema: students, courses, instructors, enrollments (with grade).

Features:

Enroll student (prevent duplicate enrollment).

Query GPA per student.

Create view showing student transcript.

For each project:

Build schema.

Seed sample data (20–200 rows).

Write 10 queries (reporting + analytics).

Produce ER diagram (DB Browser or drawsql).

11. Practice Exercises (compact list — try them now)

Create employees(emp_id, name, dept, salary). Add 10 rows. List top 3 salaries.

Create departments table and normalize employees to use dept_id.

Given sales(order_id, customer, item, qty, price) — normalize to 3NF.

Write query: customers who bought all books from a given author.

Write query: products with no sales in the last 6 months.

Write trigger (SQLite has limited trigger support): update orders.total when an order_items row is inserted.

Use EXPLAIN QUERY PLAN on a join of two large tables; identify if index is used.

(If you want, I’ll give full SQL solutions for each. I included answers to #1–3 below.)

Solutions (quick)
1.

CREATE TABLE employees (emp_id INTEGER PRIMARY KEY, name TEXT, dept TEXT, salary REAL);
-- insert rows...
SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 3;

CREATE TABLE departments (dept_id INTEGER PRIMARY KEY, dept_name TEXT);
ALTER TABLE employees RENAME TO employees_old;
CREATE TABLE employees (emp_id INTEGER PRIMARY KEY, name TEXT, dept_id INTEGER, salary REAL, FOREIGN KEY(dept_id) REFERENCES departments(dept_id));
-- migrate data with JOINs and lookups


(High level) Create customers, orders, products, order_items. Move price to products.

12. Resources & Cheatsheet

Keep a small cheatsheet: SELECT, JOIN, GROUP BY, HAVING, ORDER BY, LIMIT, CREATE, ALTER, PRAGMA foreign_keys, EXPLAIN QUERY PLAN.

Use the Chinook sample DB for practice (you already know how to load it). It has realistic schema.
